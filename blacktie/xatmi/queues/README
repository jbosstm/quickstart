JBoss, Home of Professional Open Source
Copyright 2010, Red Hat, Inc., and others contributors as indicated
by the @authors tag. All rights reserved.
See the copyright.txt in the distribution for a
full listing of individual contributors.
This copyrighted material is made available to anyone wishing to use,
modify, copy, or redistribute it subject to the terms and conditions
of the GNU Lesser General Public License, v. 2.1.
This program is distributed in the hope that it will be useful, but WITHOUT A
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License,
v.2.1 along with this distribution; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA  02110-1301, USA.


1. SET ENVIRONMENT VARIABLES
In order to run the quickstart you need to make sure that you have set the environment
appropriately. You will need to make sure that you edit the variables with values 
starting with REPLACE_WITH_: 
On Linux you need to edit:
	$BLACKTIE_HOME/setenv.sh
On Windows:
	%BLACKTIE_HOME%\setenv.bat
Then, execute the script setenv

On Windows: 
You MUST use an environment configured with the VC++ development tools, e.g. launch:
C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat


2. CREATE THE CLIENT
On Linux:
	generate_client -Dclient.includes=queues.c
	generate_client -Dclient.includes=txsender.c -Dclient.output.file=txsender
On Windows:
	generate_client -Dclient.includes=queues.c -Dx.define=WIN32
	generate_client -Dclient.includes=txsender.c -Dclient.output.file=txsender -Dx.define=WIN32


3. DEPLOY THE BLACKTIE ADMIN SERVICE
Undeploy any older versions of the blacktie admin service
Copy the file $BLACKTIE_HOME/blacktie-admin-services/blacktie-admin-services-<VERSION>.ear into $JBOSS_HOME/standalone/deployments


4. RUN THE APPLICATION SERVER
Make sure that the naming, messaging and transaction services are running, by running the JBoss server:
<JBOSS_HOME>/bin/standalone.sh|bat -c standalone-blacktie.xml -Djboss.bind.address=$JBOSSAS_IP_ADDR -Djboss.bind.address.unsecure=$JBOSSAS_IP_ADDR


5. DEPLOY THE QUEUE
As this queue is externally managed you will need to add the TestOne queue to the HornetQ configuration.
The easiest way to do this is to edit the file:
<JBOSS_HOME>/server/all-with-hornetq/deploy/hornetq.sar/hornetq-jms.xml and add:
   <queue name="BTR_TestOne">
      <entry name="/queue/BTR_TestOne"/>
   </queue>
NOTE: The name of the queue is either prefixed with BTR_ or BTC_ dependent upon whether this queue will be accessed
      from a tpcall/tpacall (i.e. RPC) which leads to a prefix of BTR_ - Alternatively it will be prefixed BTC_ if
      it is accessed from the conversational tpconnect method.
NOTE: If you have already ran the unit tests (i.e. you are building from source) you will already find that this queue
      has been deployed into an alternative file:
      <JBOSS_HOME>/server/all-with-hornetq/conf/hornetq-jms.xml

6 RUN THE EXAMPLE (STANDARD)

export BLACKTIE_SERVER_ID=1	# automatically starts a server running when tpadvertise is called
./client

If you want to use priorities then try running the quickstart with args of the form <put cnt msgid priority>
./client put 2 0 9	# queue 2 messages at highest priority (9) starting with message id 0
./client put 2 2 8	# queue 2 messages at next lower priority (8) starting with message id 2
./client put 2 4 7	# queue 2 messages at next lower priority (7) starting with message id 4
./client get 6		# retrieve all 6 messages - they should be received in increasing message id order

7. ALTERNATIVE: RUN THE EXAMPLE (TRANSACTIONAL SEND AND RECEIVE)
./client get 2 # Run the receiver waiting for messages, this will pause waiting for messages

or to run the client within its own transaction:
./client getabort 2 # after receiving 2 messages the clients transaction will be aborted
./client getcommit 2 # after receiving 2 messages clients transaction will be commited

In a different window:

./txsender # This will send two messages in a transaction, then pause waiting for you to press 1 and 
           # enter to commit the transaction or 2 and enter to rollback the transaction
           # At this point you could view the JMX browser (http://localhost:8080/jmx-console/) and check the BTR_TestOne mbean 
           # http://localhost:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=org.hornetq%3Amodule%3DJMS%2Ctype%3DQueue%2Cname%3D%22BTR_TestOne%22
           # Observe the MessagesAdded attribute before and after committing the transaction

After you commit the transaction the client process will receive the two messages sent by txsender.

[If the client was started within a transaction and aborted (./client getabort 2) then the consumed messages
will be still be available. You should verify this by running ./client get 2 and confirm that 2 messages are received.
If the client was started within a transaction and comitted ./client getcommit 2) then the consumed messages
will not be available. You should verify this by running ./client get 2 and confirm that no messages are received.]

8. ALTERNATIVE TWO: RUN THE PROPAGATED TRANSACTION QUEUE EXAMPLE
generate_client -Dclient.includes=queues.c -Dclient.output.file=client
generate_server -Dserver.includes=BarService.c  -Dservice.names=QUEUES
generate_client -Dclient.includes=client.c -Dclient.output.file=clientSender

You will then end up with three executables:
client (we will use this as above to dequeue messages
clientSender (we will use this to invoke a standard xatmi service)
server (we will use this as a standard XATMI service which transactionally enqueues a message)

1. In the first window type:
	btadmin startup
2. In the second window type:
	export BLACKTIE_SERVER_NAME=myserv
	export BLACKTIE_SERVER_ID=1
	./client get 1
3. In the third window type:
	./clientSender
	Then press either 1 to commit the transaction or 2 to roll it back
	You can observer the JMX browser as per the transactional sender quickstart above
4. Shutdown the server:
	btadmin shutdown
