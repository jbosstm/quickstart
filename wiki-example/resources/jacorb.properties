##  $Id: jacorb.properties,v 1.2 2011/02/15 16:31:14 mbenitez Exp $

###############################################################################
##                                                                           ##
##               JacORB configuration for the JBoss server                   ##
##                                                                           ##
###############################################################################


########################################
#                                      #
#   Initial references configuration   #
#                                      #
########################################

ORBInitRef.NameService=corbaloc::localhost:3728/JBoss/Naming/root

########################################
#                                      #
#      Export of corbaloc IORs         #
#                                      #
########################################

# the object key mapping below permit clients of a name service to
# access it using corbaloc::ipaddress:portnum/NameService
jacorb.orb.objectKeyMap.NameService=JBoss/Naming/root

##################################
#                                #
#   ORB version number output    #
#                                #
##################################

# if on, the ORB's version number is printed whenever the ORB is initialized
jacorb.orb.print_version=off

##################################
#                                #
#   Debug output configuration   #
#                                #
##################################

# Logging levels for the ORB instance that runs within the JBoss application 
# server are not defined in this file anymore. Instead of specifiyng logging
# levels here, you should use category elements in file log4j.xml to limit the
# logging output of the various JacORB categories (jacorb, jacorb.orb, 
# jacorb.orb.factory, jacorb.orb.interceptors, jacorb.orb.giop, jacorb.orb.iiop,
# jacorb.giop.conn, jacorb.poa, jacorb.naming). Examples:
#
# <category name="jacorb">
#    <priority value="WARN"/>
# </category>
#
# <category name="jacorb.poa">
#    <priority value="DEBUG"/>
# </category>
#
# The above for is the server-side ORB only. At the client side, JacORB logging
# levels should still be defined via *.log.verbosity properties, in a 
# client-side orb.properties or <ORBid>.properties (e.g., jacorb.properties) 
# file. 

# hexdump outgoing messages
jacorb.debug.dump_outgoing_messages=off

# hexdump incoming messages
jacorb.debug.dump_incoming_messages=off

##################################################
#                                                #
#    WARNING: The following properties should    #
#    only be edited by the expert user. They     #
#    can be left untouched in most cases!        #
#                                                #
##################################################

################################
#                              #
#   Basic ORB Configuration    #
#                              #
################################

# the GIOP minor version number to use for newly created IORs
jacorb.giop_minor_version=2

# number of retries if connection cannot directly be established
jacorb.retries=5

# how many msecs. do we wait between retries
jacorb.retry_interval=500

# size of network buffers for outgoing messages
jacorb.outbuf_size=2048

# log2 of maximum buffer size managed by the internal
# buffer manager.
#
# This is NOT the maximum buffer size that
# can be used, but just the largest size of buffers that
# will be kept and managed. This value will be added to
# an internal constant of 5, so the real value in bytes
# is 2**(5+maxManagedBufSize-1). You only need to increase this
# value if you are dealing with LOTS of LARGE data structures.
# You may decrease it to make the buffer manager release large
# buffers immediately rather than keeping them for later
# reuse.
jacorb.maxManagedBufSize=24
# If this value is 0 an extra unlimited size buffer cache is created
# for the CDROutputStreams. If this value is > 0 then the cache will
# be purged every x msecs.
jacorb.bufferManagerMaxFlush=-1

# Normally, a jacorb server will close the TCP/IP connection right
# after sending a CloseConnection message. However, it may
# occasionally happen that the client sends a message into the closed
# connection because it hasn't handled the CloseConnection yet. To
# avoid this situation, closing of the TCP/IP connection can be delayed.
#jacorb.connection.delay_close=on
#jacorb.connection.timeout_after_closeconnection=20000

# Wait the specified number of msecs for a reply to a request. If
# exceeded, a org.omg.CORBA.TIMEOUT exception will be thrown
#jacorb.connection.client.pending_reply_timeout=0

# Client-side connection idle timeout. Set to a non-zero value
# to close an idle connection after so many msecs. Default is zero,
# meaning a connection will be kept open indefinitely, or until
# the OS decides to close it.
#jacorb.connection.client.idle_timeout=0

# Server-side connection idle timeout. Set to a non-zero value
# to close an idle connection after so many msecs. Default is zero,
# meaning a connection will be kept open indefinitely, or until
# the OS decides to close it.
#jacorb.connection.server.timeout=10000

# Max no of accepted connections on the server.
#jacorb.connection.max_server_connections=

# Max number of connection threads.
#jacorb.connection.max_threads=

# The number of msecs that are waited until the next attempt to find
# an idle connection is made (i.e. do not continuously spin)
#jacorb.connection.wait_for_idle_interval=500

# The class name of the SelectionStrategy class
#jacorb.connection.selection_strategy_class=

# The class name of the StatisticsProvider class
#jacorb.connection.statistics_provider_class=

#jacorb.reference_caching=off

#
# The following property specifies the class which is used for
# reference caching. WeakHashtable uses WeakReferences, so entries
# get gc'ed if only the Hashtable has a reference to them. This
# is useful if you have many references to short-living non-persistent
# CORBA objects. It is only available for java 1.2 and above.
#
# On the other hand the standard Hashtable keeps the references until
# they are explicitely deleted by calling _release(). This is useful
# for persistent and long-living CORBA objects.
#
#jacorb.hashtable_class=org.jacorb.util.WeakHashtable
#
jacorb.hashtable_class=java.util.Hashtable

# use GIOP 1.2 byte order markers (since CORBA 2.4-5)
jacorb.use_bom=off

# add additional IIOP 1.0 profiles even if we are using IIOP 1.2
jacorb.giop.add_1_0_profiles=off

# Use DNS names in IORs
jacorb.dns.enable=off

# Compact Typecodes (0 - off, 1 - partial (not member_names), 2 - all)
jacorb.compactTypecodes=0

# Cache typecode on read
jacorb.cacheTypecodes=off

# Cache poa names
jacorb.cachePoaNames=off

###########################################
#                                         #
#         Interoperability                #
#                                         #
###########################################

# Turn off indirection encoding for repeated typecodes. This fixes
# interoperability with certain broken ORB's eg. Orbix2000
jacorb.interop.indirection_encoding_disable=off

# Iona Comet CORBA/COM bridge can incorrectly encode buffer lengths.
# Enabling this property adds additional length checking and adjustment
# for interoperability with Comet.
jacorb.interop.comet=off

# Some ORBs do not set a byte value of 1 as a CDR encoded boolean true
# value. Enabling this property interprets any non zero CDR encoded
# boolean value as true.
jacorb.interop.lax_boolean_encoding=off

# Control whether the method create_abstract_interface_tc performs
# a validity check on the name parameter or not. Turning this check
# off circumvents a bug in Sun's implementation of javax.rmi.CORBA.ValueHander,
# which occasionally passes an invalid name (an empty string) to
# ORBSingleton.create_abstract_interface_tc. If you are using RMI valuetypes,
# you should turn this property off. JBoss uses RMI (and RMI valuetypes), so
# you should NOT turned this property on!
jacorb.interop.strict_check_on_tc_creation=off

# Custom-marshalled RMI valuetypes should be encoded as chunks, but some
# ORBs are not able to decode chunked values. Disable this property for
# interoperability with the ORB in Sun's JDK 1.4.2.
jacorb.interop.chunk_custom_rmi_valuetypes=on

# RMI/IIOP data encoded as chunks should contain the length of the chunk. 
# The ORB in Sun's JDK does not always send the length always. Enable this 
# property for interoperability with the Sun ORB.
jacorb.interop.sun=on

###########################################
#                                         #
#         Socket Factories                #
#                                         #
###########################################

# A factory design pattern is used for the creation of sockets and server
# sockets.
# The jacorb.net.socket_factory property can be used to configure
# a socket factory that must implement the operations defined in the
# interface org.jacorb.orb.factory.SocketFactory.
# The jacorb.net.server_socket_factory property can be used to configure a
# server socket factory that must implement the operations defined in the
# interface org.jacorb.orb.factory.ServerSocketFactory.
#
#jacorb.net.socket_factory=org.jacorb.orb.factory.DefaultSocketFactory
#jacorb.net.server_socket_factory=org.jacorb.orb.factory.DefaultServerSocketFactory
#jacorb.net.socket_factory=org.jacorb.orb.factory.PortRangeSocketFactory
#jacorb.net.server_socket_factory=org.jacorb.orb.factory.PortRangeServerSocketFactory
#
# Additional socket factores are supported that allow for the configuration
# of maximum and minimum port numbers that can be used. This can be used to
# enable firewall traversal via a fixed port range. To use these socket factories
# configure one or both of the following property pairs. The first property pair
# configures the client socket factory and the second pair the server socket
# factory.
#
#jacorb.net.socket_factory.port.min
#jacorb.net.socket_factory.port.max
#jacorb.net.server_socket_factory.port.min
#jacorb.net.server_socket_factory.port.max

###########################################
#                                         #
#         BiDirectional GIOP              #
#                                         #
###########################################

# uncomment this initializer if you want to use BiDirectional GIOP

#org.omg.PortableInterceptor.ORBInitializerClass.bidir_init=org.jacorb.orb.connection.BiDirConnectionInitializer


###########################################
#                                         #
#       Proxy address in IOR              #
#                                         #
###########################################

#
# with these two properties it is possible to
# tell the ORB what IP/port IORs should contain,
# if the ServerSockets IP/port can't be used
# (e.g. for traffic through a firewall).
#
# WARNING: this is just "dumb" replacing, so you
# have to take care of your configuration!
#

#jacorb.ior_proxy_host=1.2.3.4
#jacorb.ior_proxy_port=4711


###########################################
#                                         #
#   The Object Adapter Internet Address   #
#                                         #
###########################################

# IP address on multi-homed host (this gets encoded in
# object references). NOTE: Adresses like 127.0.0.X
# will only be accessible from the same machine!
#OAIAddr=127.0.0.1

# This are the IIOP ports officially assigned to JBoss by IANA:
OAPort=3728
OASSLPort=3729

############################
#                          #
#   Default Interceptors   #
#   Please leave them in!  #
#                          #
############################
org.omg.PortableInterceptor.ORBInitializerClass.standard_init=org.jacorb.orb.standardInterceptors.IORInterceptorInitializer

###############################################
#                                             #
#   Implementation Repository Configuration   #
#                                             #
###############################################
# Switch off to avoid contacting the ImR on every server start-up
jacorb.use_imr=off

# the implementation name, should be set to a different
# name in the code of persistent servers
jacorb.implname=JBoss

#########################
#                       #
#   SSL Configuration   #
#                       #
#########################

# This interceptor must be set if programs need access to
# certificates using the CORBA Security API, SSL works also
# without this interceptor

#org.omg.PortableInterceptor.ORBInitializerClass.ForwardInit=org.jacorb.security.ssl.sun_jsse.SecurityServiceInitializer

# qualified classname of access decision object
#jacorb.security.access_decision=org.jacorb.security.level2.AccessDecisionImpl

# list of qualified classnames of principal authenticator objects,
# separated by commas (no whitespaces!). The first entry (that can
# be successfully created) will be available through the
# principal_authenticator property.
# jacorb.security.principal_authenticator=org.jacorb.security.level2.PrincipalAuthenticatorImpl

# the qualified classname of the ssl socket factory class
jacorb.ssl.socket_factory=org.jboss.iiop.jacorb.SSLSocketFactory

# the qualified classname of the ssl server socket factory class
jacorb.ssl.server_socket_factory=org.jboss.iiop.jacorb.SSLServerSocketFactory

# change to "on" to enable SSL
jacorb.security.support_ssl=off

# IIOP/SSL parameters (numbers are hex values, without the leading "0x"):
# EstablishTrustInTarget = 20
# EstablishTrustInClient = 40
# mutual authentication = 60

jacorb.security.ssl.client.supported_options=60
jacorb.security.ssl.client.required_options=0

jacorb.security.ssl.server.supported_options=60
jacorb.security.ssl.server.required_options=0

#org.omg.PortableInterceptor.ORBInitializerClass.ForwardInit=org.jacorb.security.ssl.sun_jsse.SecurityServiceInitializer

# tell JacORB not to add SSL components to IORs (an IORinterceptor will do it)
jacorb.security.ssl_components_added_by_ior_interceptor=on

#########################
#                       #
#   POA Configuration   #
#                       #
#########################

# displays a GUI monitoring tool for servers
jacorb.poa.monitoring=off

# thread pool configuration for request processing
jacorb.poa.thread_pool_max=32
jacorb.poa.thread_pool_min=2

# if set, request processing threads in thePOA
# will run at this priority. If not set or invalid,
# MAX_PRIORITY will be used.
#jacorb.poa.thread_priority=

# Properties controlling the POA's request queue.  If queue_wait is off,
# then if there are more than queue_max requests in the queue, the
# client gets TRANSIENT exceptions for any requests.  If queue_wait is on,
# then the call blocks at the server side until no more than queue_min
# requests are left in the queue.  The new request is then delivered as usual.
jacorb.poa.queue_wait=off
jacorb.poa.queue_max=100
jacorb.poa.queue_min=10

##################################
#                                #
#   Logger Factory Configuration #
#                                #
##################################

jacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory
